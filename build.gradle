// plugins {
// 	id 'java'
// 	id 'jacoco'
//     id 'application'
// }

// group = 'com.geektrust'
// version = '1.0'
// sourceCompatibility = 1.8
// targetCompatibility = 1.8

// jacoco { //Please do not change this
//     toolVersion = "0.8.4"
//     reportsDir = file("$buildDir/jacoco")
// }

// jacocoTestReport { //Please do not change this
//     reports {
//         xml.enabled true
//         csv.enabled false
//         html.enabled false
//         xml.destination file("./jacoco.xml")
//     }
// }

// application {
//     mainClassName = 'com.geektrust.backend.App'
// }

// jar {
//     archiveBaseName = 'geektrust' //Please do not change this final artifact name
//     version =  null               //Please do not change this final artifact version
//     manifest {
//         attributes 'Main-Class' : 'com.geektrust.backend.App' //Change this to the main class of your program which will be executed
//     }
//     // To create a single jar with all dependencies.
//     from {
//         configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//     } {
//         exclude "META-INF/*.SF"
//         exclude "META-INF/*.DSA"
//         exclude "META-INF/*.RSA"
//     }
// }

// repositories {
// 	mavenCentral()
// }

// dependencies {
// 	testImplementation 'org.mockito:mockito-junit-jupiter:3.11.1'
// 	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
// }

// test { ///Please do not change this
//     useJUnitPlatform()
//     testLogging {
//         events "PASSED", "SKIPPED", "FAILED", "STANDARD_ERROR"
//     }
//     finalizedBy jacocoTestReport // report is always generated after tests run
//     afterSuite { desc, result ->
//         if (!desc.parent)
//             println("${result.resultType} " +
//                 "(${result.testCount} tests, " +
//                 "${result.successfulTestCount} successes, " +
//                 "${result.failedTestCount} failures, " +
//                 "${result.skippedTestCount} skipped)")
//         }
// }

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

// plugins {
//     id 'java'
//     id 'jacoco'
//     // Apply the application plugin to add support for building a CLI application in Java.
//     id 'application'
// }

// group = 'com.example'
// version = '1.0'
// sourceCompatibility = 11
// targetCompatibility = 11

// ext {
// 	buildId = System.currentTimeMillis()
// }

// buildDir = '/tmp/external_build'

// application {
//     // Define the main class for the application.
//     mainClass = 'com.example.demo.App'
// }

// repositories {
//     // Use Maven Central for resolving dependencies.
//     mavenCentral()
// }


// jacoco { //Please do not change this
//     toolVersion = "0.8.4"
//     reportsDir = file("$buildDir/jacoco")
// }

// jacocoTestReport { //Please do not change this
//     reports {
//         xml.enabled true
//         csv.enabled false
//         html.enabled false
//         xml.destination file("./jacoco.xml")
//     }
// }

// jar {
//     archiveBaseName = 'example' //Please do not change this final artifact name
//     version =  null              //Please do not change this final artifact version
//     manifest {
//         attributes 'Main-Class' : 'com.example.demo.App' //Change this to the main class of your program which will be executed
//     }
//     // To create a single jar with all dependencies.
//     from {
//         configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
//     } {
//         exclude "META-INF/*.SF"
//         exclude "META-INF/*.DSA"
//         exclude "META-INF/*.RSA"
//     }
// }

// test { ///Please do not change this
//     	reports {
// 		junitXml.enabled = true
// 		def destinationDirectory = System.getProperty("user.home") + "/.gradle/daemon/${buildId}/test-results"
// 		junitXml.destination = file(destinationDirectory)
// 		html.enabled = true
// 	}
// 	useJUnitPlatform()
// 	testLogging.events ("STANDARD_ERROR")
// 	testLogging.events ("STANDARD_OUT")
//     finalizedBy jacocoTestReport // report is always generated after tests run
// 	afterSuite { desc, result ->
// 		if (!desc.parent) {
// 			println "\nTEST RESULT: ${result.resultType}"
// 			println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
// 					"${result.successfulTestCount} SUCCEEDED, " +
// 					"${result.failedTestCount} FAILED, " +
// 					"${result.skippedTestCount} SKIPPED"
// 		}
// 	}
// }

// //Add your dependencies here
// dependencies {
    
//     testImplementation 'com.github.stefanbirkner:system-lambda:1.2.1'

//     // Use JUnit Jupiter for testing.
//     testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
// }


plugins {
	id 'java'
	id 'application'
}

ext {
	buildId = System.currentTimeMillis()
	codinGameMainClass = "com.crio.codingame.App"
	jukeBoxMainClass = "com.crio.jukebox.App"
}

// Replace the mainClass variable with jukeBoxMainClass to only run the JukeBox Application.
// Revert back to codinGameMainClass to only run the CodingGame Application.
application {
    mainClass = codinGameMainClass
}

group = 'com.crio'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'org.mockito:mockito-junit-jupiter:3.11.1'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
}

test {
	reports {
		junitXml.enabled = true
		def destinationDirectory = System.getProperty("user.home") + "/.gradle/daemon/${buildId}/test-results"
		junitXml.destination = file(destinationDirectory)
		html.enabled = true
	}
	useJUnitPlatform {
	}
	testLogging.events ("STANDARD_ERROR")
	testLogging.events ("STANDARD_OUT")
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "\nTEST RESULT: ${result.resultType}"
			println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
					"${result.successfulTestCount} SUCCEEDED, " +
					"${result.failedTestCount} FAILED, " +
					"${result.skippedTestCount} SKIPPED"
		}
	}
}

